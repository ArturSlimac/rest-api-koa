// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product_category {
  id         Int       @id @default(autoincrement())
  categoryId String    @unique
  name       String?
  Product    Product[]
}

model Product {
  id                                 Int                                  @id @default(autoincrement())
  productId                          String                               @unique
  unitOfMeasureId                    String
  productAvailability                String?
  unitsInStock                       Int?
  imgLink                            String?
  categoryId                         String                               @default("-")
  category                           Product_category                     @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade)
  ProductDescription                 Product_description[]
  ProductPrice                       Product_price[]
  Product_unit_of_measure_conversion Product_unit_of_measure_conversion[]
  Cart_items                         Cart_items[]
}

model Product_description {
  pdId                     Int     @id @default(autoincrement())
  productId                String
  product                  Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: Cascade)
  languageId               String
  productName              String?
  productListerDescription String? @db.Text
  productShortDescription  String? @db.Text
  productLongDescription   String? @db.Text
}

model Product_price {
  ppId            Int     @id @default(autoincrement())
  productId       String
  product         Product @relation(fields: [productId], references: [productId])
  currencyId      String?
  price           Float?
  unitOfMeasureId String?
  quantity        Int?
}

model Product_unit_of_measure_conversion {
  converterId       Int     @id @default(autoincrement())
  productId         String
  product           Product @relation(fields: [productId], references: [productId])
  fromUnitOfMeasure String?
  toUnitOfMeasure   String?
  fromQuantity      Float?
  toQuantity        Float?
}

model Customer {
  cstmrId    Int     @id @default(autoincrement())
  customerId String  @unique
  logoLink   String?
  phoneNr    String?
  street     String?
  streetNr   String?
  country    String?
  city       String?
  zipCode    String?

  Purchaser Purchaser[]
}

model Purchaser {
  prchsrId    Int      @id @default(autoincrement())
  purchaserId String   @unique
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [customerId])
  auth0Id     String   @default("12345")
  firstName   String   @default("anon")
  lastName    String   @default("anon")
  phoneNumber String   @default("a number")
  Cart        Cart[]
}

model Cart {
  cartId      Int          @id @default(autoincrement())
  purchaserId String
  purchaser   Purchaser    @relation(fields: [purchaserId], references: [purchaserId])
  isPurchased Boolean      @default(false)
  Cart_items  Cart_items[]
}

model Cart_items {
  ci_id     Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int

  @@unique([cartId, productId])
}
